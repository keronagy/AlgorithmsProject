/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package algorithms;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.font.FontRenderContext;
import java.awt.font.LineMetrics;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

/**
 *
 * @author TH3_HACK3R
 */
public class NodesPanel extends javax.swing.JPanel {

    ArrayList<Node> nodes;
    int[][] adjMat;
    Graph graph;
    /**
     * Creates new form NodesPanel
     */
    public NodesPanel(ArrayList<Node> nodes,int[][] adjMat,Graph graph) {
        initComponents();
        this.nodes=nodes;
        this.adjMat=adjMat;
        this.graph=graph;
        
    }
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        int x;
        int y;
        String text;
        int n  = nodes.size();
        int x1,y1;
        
        
        
        Font fon1 = g2.getFont();
    FontRenderContext context = g2.getFontRenderContext();
    g2.setFont(fon1);
    
     
        
        ArrayList<Edge> edges= new ArrayList<Edge>(graph.getEdges());
        for (int i = 0; i < edges.size(); i++) {
            
               
                    x = edges.get(i).getOne().getPos().x*5+((50-25));
                    y = edges.get(i).getOne().getPos().y*5+((50-25));
                    //System.out.println(edges.get(i).getOne().getId()+" ("+x+","+y+") ");
                    x1 = edges.get(i).getTwo().getPos().x*5+((50-25));
                    y1 = edges.get(i).getTwo().getPos().y*5+((50-25));
                    //System.out.println(edges.get(i).getTwo().getId()+" ("+x1+","+y1+") ");

                    g2.drawLine(x, y, x1, y1);
                    
                
            
        }
           for (int i = 0; i < nodes.size(); i++) {
               g2.setFont(fon1);
            x = nodes.get(i).getPos().x*5;
            
            y = nodes.get(i).getPos().y*5;
            
            text = nodes.get(i).getId()+"";
            //System.out.println(text+" ("+x+","+y+") ");
            g.drawOval(x, y, 50, 50);
                
    int textWidth = (int) fon1.getStringBounds(text, context).getWidth();
    LineMetrics ln = fon1.getLineMetrics(text, context);
    int textHeight = (int) (ln.getAscent() + ln.getDescent());
    x1 = x + (50 - textWidth)/2;
    y1 = (int)(y + (50 + textHeight)/2 - ln.getDescent());

    
    Font fon = new Font("Arial Black", Font.BOLD, 18);
    g2.setFont(fon);
    g2.drawString(text, (int) x1, (int) y1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
